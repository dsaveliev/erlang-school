* Упрощенная реализация gen_server

Хороший подход к изучению gen_server – написать его самому. Такой
подход выбрали и Joe Armstrong (Programming Erlang, глава 16), и Fred
Hebert (LYSE, глава What is OTP?).

Пойдем и мы тем же путем. Напишем свой gen_server в 6 этапов.

** 1-й этап
Простейший цикл
src/gs1.erl

** 2-й этап
Цикл c состоянием
src/gs2.erl

** 3-й этап
Внешнее АПИ, матчинг сообщений по Ref
src/gs3.erl

** 4-й этап
Убраем дублирование кода
src/gs4.erl

** 5-й этап
Добавляем таймаут
src/gs5.erl

** 6-й этап
Монитор, обработка ошибок
src/gs6.erl


** Комментарии по этой реализации

Это мы реализовали gen_server:call/handle_call.
Еще есть start/init, cast/handle_cast, message/handle_info, terminate, code_change.

Есть еще multicall, hibernate, нюансы с timeout, и прочее.
В gen_server есть довольно много всего, но концептуально он не сложен.

Подробнее о gen_server тут:
http://yzh44yzh.by/post/gen_server.html


** Пример настоящего модуля

реализующего поведение gen_server
https://github.com/yzh44yzh/e_prof/blob/master/src/e_prof.erl


** Отложенная инициализация

init блокирует родительский процесс, причем с timeout = infinity по
умолчанию. Желательно оставлять эту функцию легковесной, и возвращать
управление родителю как можно быстрее.

Если инициализация сервера требует долгих действий (чтение файлов,
установку соединения с базой и т.д.), то такие вещи лучше делать
отложено.

#+BEGIN_SRC Erlang
init(Args) ->
    State = ...
    self() ! heavy_init,
    {ok, State}.

handle_info(heavy_init, State) ->
    NewState = ...
    {noreply, NewState};
#+END_SRC


** Deadlock на gen_server:call

С этим сталкивается почти каждый новичок в Erlang. И я тож столкнулся.

Нельзя делать gen_server:call на самого себя внутри handle_call.
Бывают более сложные варианты, когда из handle_call вызвается какая-то функция,
и уже в ней, или где-то в цепочке вызовов gen_server:call.
