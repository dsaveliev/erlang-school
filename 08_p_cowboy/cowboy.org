* Веб-сервер cowboy

Это не веб фреймворк, это веб сервер. Функциональность у него минималистичная.

https://github.com/extend/cowboy

http://ninenines.eu/docs/en/cowboy/HEAD/guide/


** роутинг

http://ninenines.eu/docs/en/cowboy/HEAD/guide/routing/

Роутинг имеет довольно громоздкий синтаксис.
Ковбой анализирует URI запроса, и, учитывая хост и путь к ресурсу,
выбирает обработчик.

Routes = [Host1, Host2, ... HostN]
где Host, это
{HostMatch, PathsList}
где PathList это
[Path1, Path2, ... PathN]
где Path это
{PathMatch, Handler, Opts}

лучше сразу взять конкретный пример:

#+BEGIN_SRC Erlang
    Routing =
        [{'_',                        % any host
          [                           % path list
           {"/api/chat/",             % path match
            bullet_handler,           % handler
            [{handler, chat_handler}] % options
           },
           {"/",
            cowboy_static,
            {file, "priv/static/index.html", [{mimetypes, cow_mimetypes, all}]}},
           {"/[...]",
            cowboy_static,
            {dir, "priv/static", [{mimetypes, cow_mimetypes, all}]}},
           {'_',
            not_found_handler,
            []}
          ]}],
#+END_SRC

Биндинги:
#+BEGIN_SRC Erlang
/user/:id/profile/ % /user/77/profile, /user/42/profile

{Id, Req2} = cowboy_req:binding(id, Req) % <<"77">>, <<"42">>
#+END_SRC

Необязательные сегменты:
#+BEGIN_SRC Erlang
/posts/[page/:number] % /posts, /posts/page/2
#+END_SRC

Эти Routing нужно скомпилировать, чтобы получить эффективное по
производительности внутреннее представление:
#+BEGIN_SRC Erlang
Routing2 = cowboy_router:compile(Routing)
#+END_SRC

И потом можно запускать ковбой:
#+BEGIN_SRC Erlang
cowboy:start_http(http, 100,
                  [{port, 8080}],
                  [{env, [{dispatch, Routing2}]}])
#+END_SRC

Здесь мы запускаем ковбой для обработки http запросов (для https нужно запускать отдельно),
с пулом из 100 акцепторов соединений, на порту 8080, с заданным роутингом.

Роутинг можно изменить, не останавливая сервер:
#+BEGIN_SRC Erlang
Routing2 = cowboy_router:compile(NewRouting),
cowboy:set_env(my_http_listener, dispatch, Rounting2).
#+END_SRC


** статические файлы

Для статического контента используется хендлер cowboy_static

В Options ему можно указать конкретный файл:
#+BEGIN_SRC Erlang
{"/",
 cowboy_static,
 {file, "priv/static/index.html", [{mimetypes, cow_mimetypes, all}]}},
#+END_SRC

Либо можно указать каталог:
#+BEGIN_SRC Erlang
{"/static/[...]",
 cowboy_static,
 {dir, "priv/static", [{mimetypes, cow_mimetypes, all}]}},
#+END_SRC
Здесь для всех путей вида http://host/static/bla/bla/bla
будет отдаваться файл priv/static/bla/bla/bla.


** http хендлер

#+BEGIN_SRC Erlang
{"/user/:user_id/profile/", sample_http_handler, []},
{'_', not_found_handler, []}
#+END_SRC

src/not_found_handler

src/sample_http_handler

POST данные можно увидеть, отправив запрос с помощью curl
#+BEGIN_SRC Erlang
yura ~ $ curl "http://localhost:8080/user/88/profile" \
> -d "user_name=Bill&age=33"

<h1>Sample http handler</h1>
<p>Host: localhost</p>
<p>Path: /user/88/profile</p>
<p>Url: http://localhost:8080/user/88/profile</p>
<p>QueryString: </p>
<p>Get Params: <ul></ul></p>
<p>Post Params: <ul><li>user_name:Bill</li><li>age:33</li></ul></p>
<p>User Id: 88</p>
<p>User Name: guest</p>%
#+END_SRC


** erlydtl шаблоны

Быстрые, компилируются в эрланговский модуль (beam-файл),
загружаются на старте ноды и хранятся в оперативной памяти а не читаются с диска
при каждом запросе.

https://github.com/erlydtl/erlydtl/

Проще всего их собирать ребаром. Для этого в rebar.config добавить:
#+BEGIN_SRC Erlang
{erlydtl_opts, [
                {doc_root, "priv/templates"}
]}.
{deps, [
       ...
        {erlydtl, ".*", {git, "https://github.com/erlydtl/erlydtl", "0.9.4"}}
       ]}.
#+END_SRC

Тогда при сборке из файла priv/templates/sample.dtl получается ebin/sample_dtl.beam

Чтобы подставить данные в шаблон, нужно:
#+BEGIN_SRC Erlang
{ok, Body} = sample_dtl:render([{name, UserName},
                                {email, <<"some@where.com">>},
                                {city, <<"Minsk">>},
                                {messages, [{1, "Message 1"},
                                            {2, "Message 2"},
                                            {3, "Message 3"}]}])
#+END_SRC

Если шаблон изменился, и его хочется подгрузить, не останавливая сервер,
это делается, как с любым эрланговским модулем: сперва перекомпилировать
#+BEGIN_SRC Erlang
rebat compile
#+END_SRC
затем подгрузить
#+BEGIN_SRC Erlang
l(sample_dtl).
#+END_SRC

Или использовать sync, обеспечивающий автоматическую загрузку измененных модулей.

src/sample_template_handler


** поддержка сессий

Поддержки сессий как таковой в cowboy нет. И даже нет удобного АПИ для работы
с куками. Приходится работать на низком уровне, задавать заголовки для
установки, чтения и снятия куки. Ну и самим реализовать хранение сессий где-то:
в базе данных или каком-то кэше.

Если хранить просто в памяти сервера (в ets, например), то тогда сессии не переживут
рестарта сервера :) Поэтому берем memcache, redis, postgresql, riak, вашу любимую БД,
и храним там.

Ну и нужно как-то генерировать уникальные id сессий. Например так:
#+BEGIN_SRC Erlang
generate_session_id() ->
    Str = integer_to_list(erlang:phash2({now(), make_ref()})),
    <<Hash:128/integer>> = erlang:md5(Str),
    list_to_binary(string:to_lower(integer_to_list(Hash, 16))).
#+END_SRC

Вот тут у меня есть библиотечка для таких дел:
https://github.com/yzh44yzh/e_base_lib/blob/master/src/eb_rand.erl

Установка куки:
#+BEGIN_SRC Erlang
SessionId = <<"6f0083b5fd77ca248e913589c55e7083">>,
CookieProps = [{path, <<"/">>}, {max_age, 30 * 24 * 3600}], % 30 days
Req2 = cowboy_req:set_resp_cookie(<<"sid">>, SessionId, CookieProps, Req),
#+END_SRC

Чтение куки:
#+BEGIN_SRC Erlang
{Sid, _} = cowboy_req:cookie(<<"sid">>, Req),
case Sid of
    undefined -> not_found;
    _ -> Sid
end
#+END_SRC

Удаление куки:
#+BEGIN_SRC Erlang
CookieProps = [{path, <<"/">>}, {max_age, 0}],
Req2 = cowboy_req:set_resp_cookie(<<"sid">>, <<>>, CookieProps, Req),
#+END_SRC

src/sample_session_handler


** web socket хендлер (и bullet.js клиент)

https://github.com/extend/bullet

Версия bullet 0.4.1 работает с ковбоем 0.8.0
а bullet master работает с ковбоем 0.9.0
то есть, со свежим ковбоем использовать не получится.

Роутинг указываем так:
#+BEGIN_SRC Erlang
{"/api/chat/", bullet_handler, [{handler, sample_web_socket_handler}]},
#+END_SRC

Хендлер выглядит так:
#+BEGIN_SRC Erlang
-module(sample_web_socket_handler).

-export([init/4, stream/3, info/3, terminate/2]).

init(_Transport, Req, _Opts, _Active) ->
    State = [],
	{ok, Req, State}.


stream(<<"match to some binary">>, Req, State) ->
    Reply = "some iolist",
	{reply, Reply, Req, State};

stream(_Data, Req, State) ->
	{ok, Req, State}.


info({some_message}, Req, State) ->
    Reply = "some iolist",
	{reply, Reply, Req, State};

info(_Info, Req, State) ->
	{ok, Req, State}.


terminate(_Req, _State) ->
	ok.
#+END_SRC

На клиенте bullet.js предоставляет довольно простой АПИ:

Открыть веб-сокет:
#+BEGIN_SRC Erlang
chat = $.bullet("ws://localhost:8080/api/chat", {});
#+END_SRC

Добавить обработчики событий:
#+BEGIN_SRC Erlang
chat.onopen = function(){
    console.log("connected to server");
};

chat.onclose = chat.onDisconnect = function(){
    console.log("disconnected from server");
};

chat.onmessage = function(event){
    console.log("got json data from server", event.data);
}
#+END_SRC

Посылать данные на сервер:
#+BEGIN_SRC Erlang
chat.send("my json data");
#+END_SRC

Ну и закрыть соединение:
#+BEGIN_SRC Erlang
chat.close();
#+END_SRC

Остается только реализовать свою логику :)
